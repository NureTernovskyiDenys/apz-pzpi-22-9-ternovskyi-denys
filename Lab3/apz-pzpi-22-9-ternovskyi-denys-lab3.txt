Міністерство освіти і науки України Харківський національний університет радіоелектроніки


Кафедра програмної інженерії





Звіт
з лабораторної роботи №3
з дисципліни "Архітектура програмного забезпечення" з теми: " Веб застосунок "







Виконав	Перевірив
ст. гр. ПЗПІ-22-9	Дашенков Д. С.
Терновський Денис














2025
 
1	ІСТОРІЯ ЗМІН

Таблиця 1 – Історія змін

№	Дата	Версія звіту	Опис змін та виправлень
1	29.05.2025	0.1	Створено звіт

2	ЗАВДАННЯ

Тема: Веб застосунок
У межах цієї лабораторної роботи створено веб-застосунок Smart Lamp Task Management System для браузерних платформ. Додаток є частиною системи управління завданнями та розумними лампами, який взаємодіє з backend API через HTTP-запити з використанням Axios клієнта. Для розробки використано React.js для frontend розробки, з підтримкою адаптивного дизайну через Tailwind CSS для різних розмірів екранів та пристроїв.
Веб-застосунок забезпечує повнофункціональний користувацький інтерфейс системи управління продуктивністю з можливостями створення та відстеження завдань, моніторингу розумних ламп, аналітики продуктивності та адміністрування системи. Система підтримує мультиязичний інтерфейс (англійська та українська мови) та забезпечує роботу як на десктопних комп'ютерах, так і на мобільних пристроях через веб-браузер.
У ДОДАТОК А вказанi основнi сторiнки веб iнтерфейсу

3	ОПИС ВИКОНАНОЇ РОБОТИ

Використані технології
	React 18.2.0 - основний UI фреймворк для створення інтерактивного користувацького інтерфейсу
	React Router DOM 6.8.1 - маршрутизація та навігація в односторінковому додатку
	Axios 1.6.0 - HTTP клієнт для взаємодії з backend API та обробки запитів
	Tailwind CSS - utility-first CSS фреймворк для стилізації компонентів та адаптивного дизайну
	Vite 5.0.8 - сучасний інструмент збірки та розробки з швидким hot reload
	Lucide React 0.294.0 - бібліотека іконок для користувацького інтерфейсу
	Recharts 2.8.0 - бібліотека для створення інтерактивних графіків та діаграм аналітики
	React Hot Toast 2.4.1 - система сповіщень та toast повідомлень
	date-fns 2.30.0 - утиліти для роботи з датами та часом
Додатково для розробки використано:
	ESLint - лінтер для контролю якості коду
	React Context API - управління глобальним станом програми
	Custom Hooks - переиспользуемые хуки для API взаємодії

Архітектура системи

 
Рисунок 1 - Загальна структура додатка

Архітектура системи
Система Smart Lamp Task Manager побудована за принципом трирівневої архітектури:
Frontend шар (React + Vite)
🔧 Компоненти: Модульна структура з переиспользуваемими UI компонентами
	Layout компоненти (Navbar, Sidebar)
	Функціональні модулі (TaskCard, DeviceCard, TaskForm)
	Спільні компоненти (Modal, общие элементы UI)
🛣️ Маршрутизація: Публічні та захищені маршрути з ролевим доступом
	Публічні: /login, /register
	Користувацькі: /dashboard, /tasks, /devices, /analytics, /profile
	Адміністративні: /admin/*, захищені ролевою перевіркою
📊 Стан: Контекстне управління станом додатку
	AuthContext: управління автентифікацією та користувацькими даними
	LanguageContext: мультимовна підтримка (EN/UK) з i18n
	Локальні хуки useApi для управління даними компонентів
🔌 Сервіси: Абстракція API викликів через спеціалізовані хуки
	useApi, useTasks, useDevices - універсальні хуки для CRUD операцій
	Спеціалізовані хуки: useCreate, useUpdate, useDelete з обробкою помилок
API шар
🌐 HTTP клієнт: Централізований axios клієнт з розширеною функціональністю
	Автоматичне додавання Authorization headers
	Перехоплення відповідей для обробки помилок
	Автоматичне оновлення access token через refresh token
🔐 Автентифікація: JWT-based система безпеки
	Access/Refresh token механізм
	Автоматичний logout при невалідних токенах
	Захищені маршрути з middleware перевіркою
⚡ Real-time: Живе оновлення даних від IoT пристроїв
	MQTT інтеграція для комунікації з Smart Lamp пристроями
	WebSocket з'єднання для real-time статусів задач
	Автоматичне оновлення UI при зміні стану пристроїв
Backend API
🛠️ RESTful ендпоінти: Модульна структура за функціональними доменами
	/auth/* - автентифікація та управління користувачами
	/tasks/* - CRUD операції з задачами, старт/пауза/завершення
	/devices/* - управління IoT пристроями та їх конфігурацією
	/analytics/* - продуктивність, звіти, AI аналітика
	/admin/* - адміністративні функції системи
🔒 Авторизація: Ролевий контроль доступу
	Ролі: user (базовий функціонал), admin (системне управління)
	Middleware для перевірки дозволів на рівні endpoints
	Захист адміністративних функцій
🤖 AI інтеграція: Розумний аналіз та рекомендації
	Оцінка тривалості задач на основі історичних даних
	Продуктивні поради та оптимізація розкладу
	Аналіз ефективності роботи користувачів
📡 IoT комунікація: MQTT протокол для Smart Lamp пристроїв
	Команди управління: увімкнення/вимкнення, налаштування яскравості
	Моніторинг стану: онлайн/офлайн, поточна задача, статистика
	Синхронізація задач між веб-додатком та фізичними пристроями
Локальне сховище
🎫 Токени: Безпечне збереження сесійних даних
	AccessToken/RefreshToken для підтримки автентифікації
	Автоматичне очищення при logout або expiry
⚙️ Налаштування: Персоналізація користувацького досвіду
	Мовні налаштування (localStorage persistence)
	Користувацькі preferences та UI конфігурація
	Кешування даних для покращення performance
🔄 Синхронізація: Консистентність між вкладками
	Відстеження змін токенів між browser tabs
	Автоматичний logout у всіх вкладках при security events
	Синхронізація real-time оновлень пристроїв


Архітектура компонентів
 
Рисунок 2 - Архітектура компонентів

Ієрархічна структура
App рівень - Кореневий компонент з роутингом та глобальними провайдерами Layout компоненти - Загальні елементи інтерфейсу (Navbar, Sidebar) Page компоненти - Основні сторінки з бізнес-логікою (Dashboard, Tasks, Devices, Analytics) Feature компоненти - Спеціалізовані компоненти функціональних модулів (TaskCard, DeviceCard) UI компоненти - Переиспользуваемі елементи інтерфейсу (Modal, FormField) Common компоненти - Спільні компоненти (Button, Spinner, Loading)
Принципи організації
Компонентна ізоляція: Кожен компонент інкапсулює власну логіку та стан Контекстне управління: AuthContext, LanguageContext для глобального стану Сервісний шар: Абстракція API викликів через custom hooks (useApi, useTasks, useDevices) Захищені маршрути: Контроль доступу за ролями (user/admin) Модульність: Розділення за функціональними областями (auth, tasks, devices, analytics)
Потік даних
Вгору: Events від дочірніх до батьківських компонентів через callback props Вниз: Props та стан від батьківських до дочірніх компонентів Сервіси: API виклики через централізовані hooks та утиліти Контекст: Глобальний стан через React Context API Real-time: MQTT дані через WebSocket з'єднання та автоматичне оновлення стану
Прийняті інженерні рішення
1. Архітектурні рішення
Context API для управління глобальним станом:
•	AuthContext - централізоване управління аутентифікацією та користувацькими даними
•	LanguageContext - підтримка мультимовності (EN/UA) з автоматичним збереженням
•	Автоматичне збереження токенів та налаштувань у localStorage
•	Синхронізація стану між вкладками браузера

Маршрутизація на основі ролей:
const ProtectedRoute = ({ children, requireAdmin = false }) => {
  if (!user) return <Navigate to="/login" />;
  if (requireAdmin && user.role !== 'admin') return <Navigate to="/dashboard" />;
  return children;
};

Сервісна архітектура для API логіки:
•	apiHelpers.auth - управління аутентифікацією та користувачами
•	apiHelpers.tasks - CRUD операції з задачами
•	apiHelpers.devices - робота з IoT пристроями Smart Lamp
•	apiHelpers.analytics - отримання аналітичних даних та звітів
•	apiHelpers.admin - адміністративні функції системи
2. Управління станом
Custom hooks для бізнес-логіки:
•	useApi - універсальний hook для API викликів з обробкою помилок
•	useCreate, useUpdate, useDelete - спеціалізовані hooks для CRUD операцій
•	useTasks, useDevices - domain-специфічні hooks з кешуванням
Обробка помилок та завантаження:
•	Централізована обробка HTTP помилок через axios interceptors
•	Toast нотифікації для користувацьких повідомлень
•	Loading стани на рівні компонентів
3. Інтернаціоналізація
Мультимовна підтримка:
•	Структуровані переклади у форматі JSON
•	Функція t() для динамічної заміни перекладів
•	Автоматичне збереження вибраної мови
•	Fallback на англійську мову при відсутності перекладу
	

Взаємодія компонентів

 
Рисунок 3 - Схема взаємодії користувацької частини


 
Рисунок 4 - Схема взаємодії адміністративної частини
Адміністрування системи

 
Рисунок 5 - Структура адміністративної панелі

Структура адміністративної панелі
Основні розділи адміністративної панелі:
	Admin Dashboard - Центральна панель з системною статистикою, статусом сервісів, графіками активності та швидкими діями
	Users Management - Управління користувачами з можливістю редагування, зміни ролей та блокування
	Devices Management - Централізоване управління IoT пристроями з командами перезапуску, обслуговування та оновлення прошивки
	System Logs - Моніторинг системних логів з фільтрацією та експортом даних
Ключові компоненти:
	Статистичні блоки: Загальна кількість користувачів, пристроїв, активних та завершених задач
	Статус сервісів: Моніторинг MQTT брокера, AI сервісу та бази даних
	Управлінські дії: Редагування користувачів, команди пристроїв, експорт логів
	Спільні компоненти: Переиспользуваемі модальні вікна, таблиці, кнопки дій та індикатори статусу
	Структура забезпечує інтуїтивну навігацію для адміністраторів з логічним групуванням функцій та централізованим доступом до всіх системних операцій.

1.	UML діаграма прецедентів (Use Case Diagram)

 
Рисунок 6 - UML діаграма прецедентів

Актори системи:
	Користувач (User) - основний користувач з правами управління власними задачами та пристроями
	Адміністратор (Admin) - розширює права користувача + системне адміністрування
Основні групи прецедентів:
	Автентифікація: Вхід, реєстрація, вихід з системи
	Управління задачами: Повний CRUD цикл + операції виконання (start/pause/complete)
	Управління пристроями: Перегляд, налаштування, додавання/видалення пристроїв
	Аналітика та звіти: Dashboard, продуктивність, експорт даних
	Управління профілем: Редагування особистих даних та налаштувань
	Адміністрування: Управління користувачами, системні логи, обслуговування
	IoT функції: Комунікація з розумними лампами через MQTT
	Системні процеси: Автоматична обробка даних та синхронізація
Ключові відношення:
	Наслідування: Адміністратор успадковує всі права користувача
	Включення: Операції з задачами автоматично включають команди пристроям
	Розширення: Функції перегляду можуть розширюватися експортом даних
Діаграма демонструє чітке розділення ролей та модульну архітектуру системи з ясними межами відповідальності.


Висновки
Smart Lamp Task Manager представляє собою інноваційну систему управління задачами з глибокою інтеграцією IoT пристроїв, побудовану на сучасних веб-технологіях. Архітектура системи базується на трирівневому підході з чітким розділенням Frontend шару (React + Vite), API шару з централізованою обробкою запитів та Backend рівня з RESTful ендпоінтами. Система забезпечує seamless взаємодію між веб-додатком та Smart Lamp пристроями через MQTT протокол, дозволяючи користувачам не лише управляти своїми задачами, але й автоматично синхронізувати їх виконання з фізичними IoT пристроями в real-time режимі.
Ключовою особливістю системи є поєднання традиційного task management функціоналу з інноваційними можливостями IoT екосистеми та AI аналітики. Ролева система доступу забезпечує гнучке управління правами між звичайними користувачами та адміністраторами, в той час як мультимовна підтримка та адаптивний інтерфейс роблять систему доступною для широкого кола користувачів. Архітектурні рішення з використанням Context API для управління станом, custom hooks для бізнес-логіки та централізованої обробки помилок створюють масштабовану та підтримувану кодову базу, готову для подальшого розвитку та інтеграції з додатковими IoT пристроями.

Посилання на GitHub: 
Посилання на YouTube:  
 
ДОДАТОК А
HomePage
 






Login
 
 

Register
 
 
Dashboard
 

TasksPage
 


Devices
 
 
Device Detail Page
 

Profile Page
 
 
Admin Page Part 1
 

Admin Page Part 2
 

 
Admin Page Part 3
 

Admin Page Part 4

 
 
Пiд декiлькох мов
 
    
