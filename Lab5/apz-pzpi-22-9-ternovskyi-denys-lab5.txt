Міністерство освіти і науки України Харківський національний університет радіоелектроніки


Кафедра програмної інженерії





Звіт
з лабораторної роботи №5
з дисципліни "Архітектура програмного забезпечення" з теми: "Презентацiя"







Виконав	Перевірив
ст. гр. ПЗПІ-22-9	Дашенков Д. С.
Терновський Денис














2025
 
1	ІСТОРІЯ ЗМІН

Таблиця 1 – Історія змін

№	Дата	Версія звіту	Опис змін та виправлень
1	22.05.2025	0.1	Створено звіт

2	ЗАВДАННЯ

Тема: Презентація цілісного проекту системи Smart Monitoring System.
Підготувати та представити коротку презентацію (10 слайдів) про результати роботи над проектом Smart lamp with task reminder, виконаним протягом двох семестрів. Продемонструвати основні функції системи через заздалегідь записане відео (4-6 хвилин) та висвітлити досягнуті й нереалізовані цілі проекту.

3	ОПИС ВИКОНАНОЇ РОБОТИ

Титульний слайд
Доброго дня! Мене звати Терновський Денис, я студент групи ПЗПІ-22-9. Сьогодні я представлю вам результати виконання чотирьох лабораторних робіт з дисципліни "Архітектура програмного забезпечення" під керівництвом Дашенкова Дмитра Сергійовича.
Тема моєї роботи - "Smart Lamp Task Management System" - це інноваційна система управління задачами через розумні IoT лампи, яка поєднує традиційний менеджмент завдань із сучасними технологіями інтернету речей та штучного інтелекту.

Огляд проєкту
Smart Lamp Task Management System - це комплексне рішення, що революціонізує підхід до управління задачами через інтеграцію з фізичними IoT пристроями.
Основна мета проєкту - створити систему, де виконання цифрових задач синхронізується з реальними фізичними пристроями. Коли користувач створює задачу в додатку, розумна лампа автоматично змінює своє освітлення, відображаючи пріоритет та статус завдання через кольорову індикацію.
Система складається з чотирьох ключових компонентів:
•	Backend API на Node.js з MongoDB для обробки даних
•	Веб-додаток на React для повноцінного управління
•	Мобільний додаток на Kotlin для швидкого доступу
•	IoT пристрої на ESP32 з RGB лампами та LCD дисплеями
Технологічний стек включає сучасні рішення: MQTT протокол для real-time комунікації з пристроями, JWT автентифікацію, REST API архітектуру та інтеграцію з Anthropic Claude для ШІ аналітики продуктивності.
Унікальність проєкту полягає в тому, що це не просто черговий task manager, а інтелектуальна екосистема, що фізично відображає ваш робочий процес через освітлення та нагадування.

Vision & Scope (Лабораторна робота №1)
У першій лабораторній роботі я розробив документ Vision & Scope, який визначив стратегічне бачення проєкту TaskLamp.
Бізнес-можливість полягає у вирішенні актуальної проблеми організації часу в епоху віддаленої роботи. Сучасні користувачі працюють у домашніх офісах, коворкінгах та гібридних просторах, де традиційні методи управління задачами часто виявляються недостатньми.
Цільова аудиторія включає:
•	Фрілансерів та remote-працівників у домашніх офісах
•	Корпоративні команди в сучасних офісних просторах
•	Студентів та дослідників у навчальних закладах
•	Користувачів коворкінг-просторів
Основний функціонал системи:
1.	Візуальне відображення задач - постійне показання поточного часу та списку завдань на LCD дисплеї з автоматичним повідомленням "Завдань не знайдено" за їх відсутності
2.	Інтелектуальне освітлення - RGB LED стрічка створює атмосферу та відображає пріоритети задач через кольорову схему
3.	IoT інтеграція - синхронізація з іншими розумними пристроями для створення цілісної екосистеми
4.	ШІ аналітика - система аналізує історію виконання задач та надає персоналізовані рекомендації для оптимізації продуктивності
Модель монетизації передбачає:
•	Базовий функціонал безкоштовно
•	Преміум підписки з розширеною ШІ аналітикою
•	Корпоративні рішення для команд
•	Інтеграція з екосистемою розумного дому

Архітектура системи
Архітектура Smart Lamp Task Management System побудована за принципом трирівневої моделі з чітким розділенням відповідальностей.
Frontend рівень представлений двома платформами:
•	React.js веб-додаток з Vite збіркою забезпечує повнофункціональний інтерфейс для десктопних користувачів
•	Kotlin мобільний додаток з MVVM архітектурою надає швидкий доступ для мобільних пристроїв
Backend рівень реалізований на Node.js з Express фреймворком:
•	REST API для взаємодії з клієнтськими додатками
•	MongoDB для збереження користувачів, задач та аналітичних даних
•	JWT автентифікація з refresh token механізмом
•	MQTT брокер для real-time комунікації з IoT пристроями
IoT рівень складається з ESP32 мікроконтролерів:
•	RGB LED стрічки для кольорової індикації пріоритетів
•	LCD дисплеї для відображення поточних задач та часу
•	WiFi модулі для підключення до мережі
•	Датчики для взаємодії з користувачем
Ключові протоколи комунікації:
•	HTTP/HTTPS для веб та мобільних клієнтів
•	MQTT для IoT пристроїв з QoS гарантіями
•	WebSocket для real-time оновлень в браузері
ШІ інтеграція через Anthropic Claude API забезпечує:
•	Аналіз паттернів продуктивності
•	Генерацію персоналізованих рекомендацій
•	Прогнозування тривалості задач
Ця архітектура забезпечує масштабованість, надійність та можливість легкого розширення функціоналу.

Мобільний додаток (Лабораторна робота №2)
У другій лабораторній роботі я розробив мобільний додаток Smart Lamp Task Manager для Android платформи, застосувавши сучасні підходи мобільної розробки.
Ключові технічні рішення:
Архітектура MVVM з Fragments - додаток організований навколо фрагментів: DashboardFragment для головного екрану з аналітикою, TasksFragment для управління задачами, DevicesFragment для моніторингу розумних ламп, та ProfileFragment для налаштувань користувача. Bottom Navigation забезпечує інтуїтивну навігацію між розділами.
Мережева взаємодія через Retrofit - всі HTTP запити до Node.js серверу централізовані через ApiService інтерфейс. Retrofit автоматично серіалізує JSON відповіді у Kotlin data класи та підтримує асинхронні операції через корутини.
Управління станом реалізовано через AuthManager для централізованої автентифікації з JWT токенами та збереження стану між сесіями.
Функціональні можливості додатку:
•	Безпечна авторизація з біометричною підтримкою
•	Створення та редагування задач з призначенням на конкретні лампи
•	Real-time моніторинг статусу IoT пристроїв
•	Dashboard з графіками продуктивності та ШІ рекомендаціями
•	Налаштування профілю та пристроїв
UML діаграми демонструють:
•	Use Case діаграма з ролями User та Admin
•	ER-модель з сутностями Task, Device, User та їх зв'язками
•	Activity діаграма процесу створення та виконання задачі
Технології Material Design 3 забезпечують сучасний та доступний інтерфейс, адаптований під різні розміри екранів та теми оформлення.
Додаток успішно демонструє integration між мобільною платформою та IoT екосистемою через серверну архітектуру.

Веб-додаток (Лабораторна робота №3)
Третя лабораторна робота присвячена розробці веб-додатку - найбільш функціонального компоненту системи.
Технологічний стек:
•	React 18.2.0 як основний UI фреймворк забезпечує декларативний підхід до розробки інтерфейсу
•	Vite 5.0.8 як build tool надає швидкий hot reload та оптимізовану збірку
•	Tailwind CSS для utility-first стилізації з повною адаптивністю
•	Axios для HTTP клієнта з interceptors для автоматичного оновлення токенів
Архітектурні рішення:
Context API для глобального стану - AuthContext управляє автентифікацією користувачів з автоматичним збереженням у localStorage, а LanguageContext забезпечує мультимовність між англійською та українською мовами.
Ролевий контроль доступу реалізований через ProtectedRoute компоненти, які перевіряють права користувача та перенаправляють до відповідних сторінок. Адміністратори мають доступ до розширеної панелі управління.
Модульна структура компонентів:
•	Layout компоненти (Navbar, Sidebar) для загальної структури
•	Page компоненти для основних розділів (Dashboard, Tasks, Devices, Analytics)
•	Feature компоненти для спеціалізованого функціоналу (TaskCard, DeviceCard)
•	UI компоненти для переиспользуваемих елементів
Ключові функції:
•	Dashboard з real-time метриками та графіками через Recharts
•	Task Management з drag-and-drop інтерфейсом та фільтрацією
•	Device Control для управління розумними лампами через MQTT команди
•	Analytics з експортом звітів та ШІ інсайтами
•	Admin Panel для управління користувачами та системними налаштуваннями
Інтернаціоналізація реалізована через JSON файли перекладів з fallback на англійську мову та збереженням вибору користувача.
Real-time функціонал забезпечує автоматичне оновлення інтерфейсу при зміні стану IoT пристроїв через WebSocket з'єднання.

Backend та масштабування (Лабораторна робота №4)
Четверта лабораторна робота була присвячена критично важливому аспекту - тестуванню продуктивності та масштабованості backend системи.
Методологія тестування: Я розробив власний Node.js скрипт stress-test.js для комплексного навантажувального тестування. Скрипт симулює реальні сценарії використання:
•	Health Check запити (40% навантаження)
•	Реєстрація користувачів (20%)
•	Авторизація (30%)
•	Отримання профілю (20%)
Конфігурація для тестування: Для коректного тестування я змінив rate limiting налаштування:
•	Загальний лімітер: з 100 до 10,000 запитів на 15 хвилин
•	Лімітер аутентифікації: з 10 до 1,000 запитів
•	Лімітер AI: з 20 до 2,000 запитів
Результати тестування:
Тест 1 (10 користувачів, 70 секунд):
•	Успішність: 100% (227/227 запитів)
•	Пропускна здатність: 3.24 RPS
•	Середній час відповіді: 1,150 мс
•	P95: 2,805 мс, P99: 3,633 мс
Тест 2 (50 користувачів, 300 секунд):
•	Успішність: лише 40.28% (841/2088 запитів)
•	Пропускна здатність: 6.74 RPS
•	Середній час відповіді: 7,073 мс (+515%)
•	59.72% запитів завершилися timeout
Критичні висновки:
1.	Точка відмови системи знаходиться між 10-20 одночасними користувачами
2.	Нелінійна деградація - при п'ятикратному збільшенні навантаження час відповіді зростає у 6 разів
3.	Вузькі місця ймовірно знаходяться в MongoDB connection pool та Node.js event loop
Рекомендації для оптимізації:
•	Впровадження Redis кешування
•	Оптимізація MongoDB індексів
•	Горизонтальне масштабування з load balancer
•	Асинхронна обробка ШІ запитів

Технології та результати
Дозвольте підсумувати технологічний стек та досягнення проєкту.
Використані технології представляють сучасний підхід до full-stack розробки:
Backend інфраструктура:
•	Node.js з Express для швидкої розробки API
•	MongoDB для гнучкого зберігання даних
•	JWT для безпечної автентифікації
•	MQTT протокол для real-time IoT комунікації
Frontend платформи:
•	React з Vite для високопродуктивного веб-додатку
•	Tailwind CSS для адаптивного дизайну
•	Axios для централізованої мережевої взаємодії
•	Kotlin з MVVM для нативного Android додатку
IoT та зовнішні сервіси:
•	ESP32 мікроконтролери для розумних ламп
•	RGB LED та LCD компоненти
•	Anthropic Claude API для ШІ аналітики
•	WiFi connectivity для безшовної інтеграції
DevOps та тестування:
•	Власний stress testing framework
•	GitHub для version control
•	YouTube демонстрації функціоналу
Ключові досягнення проєкту:
✅ Повнофункціональна екосистема - успішно реалізовані всі три платформи з seamless інтеграцією
✅ Real-time синхронізація - задачі миттєво відображаються на фізичних пристроях через MQTT
✅ Інтелектуальна аналітика - ШІ рекомендації базуються на реальних даних продуктивності
✅ Масштабована архітектура - модульна структура дозволяє легко додавати нові функції
✅ Сучасний UX/UI - мультимовний інтерфейс з адаптивним дизайном
✅ Безпека та надійність - ролевий контроль доступу та захищена автентифікація
Проєкт демонструє успішне поєднання теоретичних знань архітектури ПЗ з практичною реалізацією інноваційного IoT рішення.

Висновки та перспективи
Підводячи підсумки роботи над Smart Lamp Task Management System, можу стверджувати, що проєкт успішно демонструє принципи сучасної архітектури програмного забезпечення.
Ключові досягнення:
Вдалося створити інноваційну систему, яка виходить за межі традиційного task management, інтегруючи цифрові завдання з фізичними IoT пристроями. Це не просто технічна вправа, а реальне рішення, що може змінити підхід до організації робочого процесу.
Архітектурна цілісність - система демонструє правильне застосування принципів модульності, розділення відповідальностей та масштабованості. Трирівнева архітектура з чітким API шаром забезпечує гнучкість та можливість незалежного розвитку компонентів.
Технологічна актуальність - використані сучасні технології та підходи: React hooks, Kotlin корутини, MQTT IoT протокол, JWT автентифікація, що робить систему конкурентоспроможною.
Критичні виклики:
Навантажувальне тестування виявило серйозні обмеження продуктивності - система не витримує понад 20 одночасних користувачів. Це типова проблема монолітної архітектури, що потребує вирішення.
Стратегічні напрямки розвитку:
1.	Горизонтальне масштабування - впровадження мікросервісної архітектури з контейнеризацією
2.	Кешування та оптимізація - Redis для сесій, CDN для статичних ресурсів, database query optimization
3.	Розширення IoT екосистеми - інтеграція з Google Home, Alexa, додаткові типи розумних пристроїв
4.	Покращення ШІ - machine learning моделі для глибшої аналітики продуктивності та предиктивної аналітики
Практична цінність:
Проєкт не тільки демонструє технічні навички, але й показує розуміння реальних бізнес-потреб. Концепція синхронізації цифрових задач з фізичним середовищем має потенціал для комерціалізації.
Освітня цінність:
Виконання чотирьох лабораторних робіт дало комплексне розуміння повного циклу розробки ПЗ - від Vision & Scope до performance testing, що є безцінним досвідом для майбутньої кар'єри.
Smart Lamp Task Management System успішно поєднує теоретичні принципи архітектури ПЗ з практичною реалізацією, створюючи міцну основу для подальшого професійного розвитку.


Посилання на YouTube: 
