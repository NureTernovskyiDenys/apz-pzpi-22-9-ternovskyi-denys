Міністерство освіти і науки України Харківський національний університет радіоелектроніки
Кафедра програмної інженерії











Лабораторна робота
з дисципліни: «Архітектура програмного забезпечення»
на тему: «Розробка опису проєкту в форматі «Vision and Scope»






Виконав:
ст. гр. ПЗПІ-22-9
Терновський Денис травня 2025 р. Перевірив:
Дашенков Д. С.





Харків 2025
 
1 РОЗРОБКА ОПИСУ ПРОТОТИПУ ПРОЄКТУ В ФОРМАТІ
«VISION AND SCOPE»
1.	Історія змін

Зміни в документі нотуються до таблиці 1.1. Таблиця 1.1 – Історія змін

№	Дата	Версія звіту	Опис змін та виправлень
1	02.05.25	0.1	Створено розділ «Історія змін»
2	02.05.25	0.1	Створено розділ «Завдання»
3	02.05.25	0.1	Створено розділ «Опис виконаної роботи»
4	02.05.25	0.1	Створено розділ «Висновки»
5	03.05.25	0.1	Додано додаток А з посиланням на відеоролик
6	03.05.25	0.1	Додано додаток Б з документом Vision & Scope
7			



1.2	Завдання


Мета завдання – створити документ Vision & Scope для програмної системи управління задачами через розумні IoT лампи та продуктивності користувачів. Цей документ має чітко окреслити бачення та межі проєкту, визначаючи його актуальність, цілі, ключові функціональні можливості, а також основні технічні та організаційні аспекти.
Документ повинен служити спільною точкою орієнтації для всіх зацікавлених сторін — замовників, розробників, тестувальників, аналітиків та потенційних користувачів системи управління задачами. Він допоможе уникнути розбіжностей у трактуванні вимог щодо функціональності розумних ламп, MQTT комунікації, веб-додатка з аналітикою, адміністративної панелі та REST API, встановити єдине розуміння завдань і забезпечити контроль обсягу робіт на всіх етапах розробки системи Smart Lamp Task Server з інтеграцією ШІ для аналізу продуктивності та генерації рекомендацій.


1.3	Опис виконаної роботи


У процесі роботи було розроблено документ Vision & Scope, у якому чітко визначено бачення та межі проєкту програмної системи для управління задачами через розумні IoT лампи та підвищення продуктивності користувачів. Документ охоплює всі ключові аспекти проєкту – від актуальності проблеми до технічних деталей реалізації.
У першому розділі описано соціальну та економічну значущість проблеми ефективного управління задачами та підвищення продуктивності за допомогою IoT технологій, зокрема в контексті домашніх офісів, корпоративних приміщень, коворкінгів та навчальних закладів. Розглянуто існуючі рішення на ринку систем управління задачами, проаналізовано їхні переваги та недоліки. Також запропоновано потенційні моделі монетизації з використанням ШІ-аналітики.
У другому розділі описано основну мету створення системи – автоматизацію процесів управління, обліку та аналізу виконання задач через розумні лампи з підтримкою багатоканальних IoT пристроїв та інтелектуального аналізу продуктивності.
У третьому розділі детально описано кожен із компонентів системи: – Backend: реалізація REST API на Node.js з MongoDB, обробка даних з розумних ламп через MQTT протокол, управління користувачами та пристроями, забезпечення авторизації та автентифікації, інтеграція з Anthropic Claude для ШІ-аналізу; – Web-інтерфейс: зручна адмін-панель (React) для адміністраторів та інтерфейс для користувачів з можливістю перегляду статусу задач та прогресу виконання, налаштування пристроїв, аналізу історичних даних продуктивності та перегляду ШІ рекомендацій; – Система пристроїв: IoT-пристрої ESP32 з підтримкою RGB LED ламп та LCD дисплеїв, передача даних в реальному часі, візуалізація пріоритетів задач через кольорову індикацію та інтерактивне управління через кнопки; – ШІ-аналітика: система аналізу трендів продуктивності, виявлення патернів виконання задач, генерації персоналізованих рекомендацій та автоматичних звітів на базі машинного навчання.
Визначено технічні вимоги до кожної частини, включаючи необхідні бібліотеки, протоколи передачі даних (MQTT), типи взаємодії з користувачем, інтеграцію з розумними лампами та ШІ сервісами.
У четвертому розділі розписано зацікавлені сторони. Описано попередній план-графік розробки проєкту та визначено основні технології для реалізації системи Smart Lamp Task Server з підтримкою штучного інтелекту.
Документ Vision & Scope наведено у додатку Б.




1.4	Висновки


Розроблений документ Vision & Scope створює чітке уявлення про проєкт управління задачами через розумні IoT лампи та підвищення продуктивності користувачів, його цілі та обсяг. Він стане основою для подальшої технічної документації, планування розробки системи Smart Lamp Task Server з інтеграцією штучного інтелекту та комунікації між усіма учасниками процесу розробки інноваційної IoT платформи.
 
Додаток А
Хронологічний опис та посилання


Відеозапис доповіді на YouTube: 


Хронологічний опис доповіді:

 
Додаток Б
Документ Vision and Scope

Vision and Scope Document
For

Smart lamp with task
reminder 
Version 1.1 approved


Prepared by Терновський Денис


ст. гр. ПЗПІ-22-9
 
ЗМІСТ



Зміст	9
Журнал версій	10
1	Бізнес вимоги	11
1.1	Передумови	11
1.2	Бізнес-можливість	12
2	Концепція рішення	14
2.1	Окреслення концепції	14
2.2	Головна функціональність	14
3	Рамки та обмеження проєкту	16
3.1	Рамки первинного випуску	16
3.2	Рамки наступних випусків	18
3.3	Обмеження та винятки	20
4	Бізнес-контекст	21
4.1	Профілі зацікавлених сторін	21
4.2	Пріоритети проєкту	21
4.3	Робоче середовище	22









9
 
ЖУРНАЛ ВЕРСІЙ




Name	Date	Reason For Changes	Version
WeightMonitor	03.05.25	Створення документу	1.0
			
































10
 
1	Бізнес Вимоги
1.1	Передумови

Інтелектуальна система TaskLamp є сучасним проєктом, спрямованим на створення автоматизованого рішення для відображення завдань та часу, що
допомагає користувачам організовувати свій день. Основна ідея — надати зручний спосіб нагадувати про завдання у побуті, офісі або інших умовах.
Система дозволяє виводити поточний час та список завдань на дисплей, а у випадку їх відсутності — періодично показувати повідомлення "Завдань не знайдено". Завдяки інтеграції з RGB LED стрічкою, пристрій дозволяє
налаштовувати освітлення, що створює приємну атмосферу та доповнює функціонал пристрою. У майбутньому можливе підключення до сервера для отримання даних про завдання та дистанційного керування параметрами
освітлення.
TaskLamp сприяє підвищенню продуктивності, організації часу та створенню комфортного середовища для користувачів.

1.2	Бізнес-можливість

На сучасному ринку представлені подібні рішення, такі як інтелектуальні органайзери та пристрої для розумного дому, однак вони часто є дорогими або обмежені у функціональності. TaskLamp вирізняється серед них своєю доступністю, стильним дизайном та можливістю гнучкої адаптації під потреби користувачів завдяки інтеграції з сервером.
Особливості монетизації:
•	Платні підписки на розширений функціонал: автоматична синхронізація завдань із хмарними сервісами, персоналізовані рекомендації для організації часу та інтеграція з популярними додатками для управління
завданнями.
•	Додаткові функції для розумного дому: інтеграція з іншими пристроями (розумні лампи, термостати), створення сценаріїв автоматизації,
наприклад, зміна кольору RGB стрічки в залежності від часу доби чи настрою.
•	Співпраця з корпоративними клієнтами: налаштування пристрою для офісів, що дозволяє колективно відображати плани, дедлайни чи робочі події.
Орієнтованість на ринок: Продукт розрахований на користувачів, які
прагнуть покращити організацію свого часу та створити комфортне середовище для роботи й відпочинку. Завдяки популярності рішень для smart home, TaskLamp має великий потенціал для залучення широкої аудиторії, пропонуючи поєднання інноваційних функцій, зручності та доступності.
.
 
2	Концепція Рішення
2.1	Окреслення концепції

Сучасні користувачі орієнтовані на інноваційні рішення, які дозволяють оптимізувати організацію часу та виконання завдань. Вони прагнуть підвищити свою продуктивність, зробити побут комфортнішим та створити гармонійне середовище для роботи і відпочинку.

2.2	Головна функціональність

•	MF-1: Відображення завдань та часу
TaskLamp забезпечує відображення актуального списку завдань та поточного часу у режимі реального часу. У разі відсутності завдань на екрані автоматично
з'являється повідомлення "Завдань не знайдено".
•	MF-2: Налаштування RGB LED стрічки
Користувачі можуть налаштовувати кольори та ефекти RGB LED стрічки для створення комфортної атмосфери. У майбутньому планується можливість керування через мобільний додаток або сервер.
•	MF-3: Нагадування про важливі завдання
Система надає користувачам сповіщення про важливі завдання або події, які наближаються до дедлайну, допомагаючи ефективно управляти часом.
•	MF-4: Інтеграція з іншими IoT-пристроями
TaskLamp може синхронізуватись з розумними пристроями, такими як
термостати, освітлення або гаджети для планування, створюючи єдину екосистему організації роботи та відпочинку.
•	MF-5: Аналіз даних та адаптація
Пристрій відображає історію виконаних завдань та надає користувачам можливість переглядати динаміку їхньої продуктивності. У майбутньому можна буде отримувати персоналізовані рекомендації щодо оптимізації розкладу.
Ці функціональні можливості роблять TaskLamp універсальним рішенням для організації часу, створення затишку та інтеграції з сучасними технологіями.
 
3	Рамки Та Обмеження Проєкту
3.1	Рамки первинного випуску

Початкова версія продукту включатиме основний функціонал, спрямований на забезпечення базового рівня безпеки житла через IoT- рішення. Цей реліз створює фундамент для подальшого розвитку системи та включає такі функції:
Моніторинг доступу:
Реалізація функціональності для фіксації відкриття та закриття дверей і вікон за допомогою IoT-датчиків. Система відображає поточний статус доступу в реальному часі у мобільному додатку.
Сповіщення через мобільний додаток:
Автоматичні push-сповіщення про виявлені події, такі як несанкціоноване відкриття або залишені відкритими вікна. Сповіщення налаштовуються залежно від уподобань користувача, включаючи час, місце та рівень тривоги.
Збір і збереження даних про події:
Усі події, пов’язані з відкриттям і закриттям дверей чи вікон, будуть зберігатися у хмарному сховищі. Це дозволить користувачам отримувати доступ до історії подій для аналізу.
Базова інтеграція з відеоспостереженням:
Інтеграція з базовими системами відеоспостереження дозволяє переглядати відеозаписи з камер у момент отримання сповіщення про подію. Це сприяє кращому розумінню ситуації у разі тривоги.
Передбачено базові інструменти адміністрування для створення користувачів, налаштування прав доступу та управління системними параметрами. У першому релізі реалізовано сервер з базовими алгоритмами для контролю, обліку та аналізу інформації, що дозволяє ефективно моніторити процеси зважування на підприємствах та в домогосподарствах.
Система буде доступною для використання:
–	на персональних комп'ютерах через веб-інтерфейс;
–	на сервері для централізованого моніторингу;
–	на мобільних пристроях.
Програмне забезпечення серверної частини системи:
Функції серверної частини:
–	REST API для веб-інтерфейсу та мобільного клієнта;
–	обробка даних від IoT-пристроїв зважування (ваги, датчики навантаження);
–	авторизація та автентифікація;
–	робота з базою даних (MongoDB);
–	валідація даних, контроль відповідності метрологічним вимогам.
Вимоги до серверної частини:
–	мова: Node.js;
–	база даних: MongoDB;
–	архітектура: REST;
–	масштабованість, модульність.
Веб-застосунок:
Веб-інтерфейс використовується для адміністрування та користувацького доступу.
Функції:
–	управління користувачами та ролями (для адмінки);
–	створення, редагування, видалення облікових записів (для адмінки);
–	призначення ролей (для адмінки);
–	налаштування прав доступу (для адмінки);
–	перегляд даних (для всіх користувачів);
–	доступ до логування подій.
Вимоги:
–	розробка на React (з використанням сучасних компонентів);
–	доступ через браузер;
–	безпечна автентифікація;
–	зручний інтерфейс для моніторингу показників ваги з багатоканальних пристроїв;
–	збереження даних у MongoDB.
Мобільний застосунок:
Функції:
–	доступ до ключових даних про показники ваги для користувачів;
–	перегляд звітів та основних показників зважування.
Вимоги:
–	розробка на Kotlin;
–	безпечна автентифікація;
–	зручний інтерфейс для швидкого перегляду вагових даних.
Програмне забезпечення пристрою IoT:
Взаємодія з IoT-пристроями зважування, такими як датчики навантаження та ваги, встановлені на виробничому обладнанні, складських системах та домашніх пристроях. Реалізовано автоматичний збір, обробку та відображення вагових даних у реальному часі.
Функції:
–	Збір та передача даних з пристроїв;
–	Надсилання даних на сервер у реальному часі через MQTT;
–	Аналіз поточних показників порівняно з граничними значеннями;
–	Збереження історії змін вагових показників для трасування процесів.
Вимоги:
–	Підключення до мережі Wi-Fi або мобільного інтернету;
–	Пристрої зважування з підтримкою MQTT протоколу;
–	Налаштування інтервалів зчитування показників ваги.
Система складається з трьох основних компонентів: мобільного застосунку, веб-застосунку та серверної частини. Всі компоненти взаємодіють через REST API. Також підключено IoT-пристрої для моніторингу показників ваги у реальному часі

3.2	Рамки наступних випусків

У першій версії TaskLamp будуть реалізовані базові можливості для організації часу та управління завданнями, включаючи:
•	Відображення часу та завдань:
o	Постійне відображення поточного часу на екрані.
o	Виведення списку завдань із можливістю оновлення.
o	Періодичне відображення тексту "Завдань не знайдено", якщо список порожній.
•	Керування RGB LED стрічкою:
o	Базові налаштування кольору та яскравості через програмний інтерфейс.
o	Майбутня можливість інтеграції з сервером для дистанційного управління.
•	Сповіщення та нагадування:
o	Нагадування про важливі завдання або події, близькі до дедлайну.
o	Сповіщення про відсутність завдань для стимулювання продуктивності.
•	Інтеграція з IoT-пристроями:
o	Базова підтримка синхронізації з іншими пристроями розумного дому (освітлення, термостати).
o	Майбутнє розширення для роботи з платформами, як-от Google Home чи Amazon Alexa.
•	Налаштування профілю користувача:
o	Збереження історії виконаних завдань для аналізу продуктивності.
o	Персоналізація інтерфейсу користувача (вибір теми, кольорів LED стрічки тощо).
•	Захист даних:
o	Відповідність вимогам GDPR для захисту конфіденційності.
o	Використання сучасних методів шифрування для збереження персональних даних.
•	Адміністрування пристрою:
o	Панель управління для моніторингу активності та управління налаштуваннями.
o	Можливість оновлення прошивки пристрою.
•	Мобільний додаток (майбутнє розширення):
o	Розробка додатків для Android та iOS.
o	Синхронізація завдань та налаштувань через хмарні сервіси.
Ці функції забезпечать базову функціональність TaskLamp для організації часу, створення комфортної атмосфери та підтримки продуктивності.

3.3	Обмеження та винятки

•	Обмежена функціональність:
У першій версії пристрій буде орієнтований на базові можливості, такі як
відображення часу, списку завдань і тексту "Завдань не знайдено" за відсутності активних завдань. Розширені функції, такі як глибокий аналіз виконаних завдань чи інтеграція з календарями, будуть додані у майбутніх версіях.
•	Інтеграція з IoT-пристроями:
На початковому етапі підтримка IoT-пристроїв буде обмежена базовими функціями синхронізації. Наприклад, зміна кольору RGB LED стрічки може
 
залежати від інших смарт-пристроїв, але повноцінна інтеграція з платформами, такими як Google Home чи Amazon Alexa, буде реалізована пізніше.
•	Обмежений набір рекомендацій:
Пристрій пропонуватиме лише прості сповіщення про завдання чи їхню відсутність без поглибленого аналізу продуктивності або персоналізованих порад. Такі функції, як автоматичні нагадування залежно від графіка користувача,
плануються у наступних оновленнях.
•	Орієнтація на мобільні пристрої:
Взаємодія з TaskLamp на початковому етапі буде обмежена через налаштування в коді або простий серверний функціонал. Підтримка мобільних додатків (Android, iOS) із розширеними функціями з’явиться у наступних версіях, тоді як десктопна версія на етапі запуску не планується.
Ці обмеження забезпечують фокусування на базовому функціоналі
TaskLamp для швидкого запуску продукту та отримання відгуків від
користувачів, що дозволить поступово вдосконалювати систему й розширювати її можливості..
.
 
4	Бізнес-Контекст
Stakeholder Profiles

Stakeholder	Major Value	Attitudes	Major Interests	Constraints
Користувач	Полегшення контролю за здоров'ям	Зацікавлений у зручності та простоті
використання продукту	Підвищення якості життя через отримання
рекомендацій	Наявність смарт- пристроїв, сумісність з
платформами
Розробники продукту	Створення стабільного та
масштабованого продукту	Зацікавлені в успішному запуску та масштабуванні продукту	Реалізація основної функціональності,
інтеграція з іншими пристроями	Технічні обмеження,
потреба в тестуванні
Інвестори	Потенціал на ринку	Зацікавлені в фінансовій вигоді від росту користувачів та монетизації	Масштабованість проекту, можливість виведення на ринок	Ризики монетизації, конкуренція на ринку
Project Priorities

Dimension	Driver
(state objective)	Constraint
(state limits)	Degree of Freedom
(state allowable range)
Schedule	Запуск версії 1.0 до кінця червня 2025 року	Дата випуску версії 1.0 є фіксованою	Можливі переноси через брак часу
Features	Інтеграція основних функцій моніторингу
та аналізу		70-80% функцій високого пріоритету має бути
реалізовано у версії 1.0
Quality	Мінімальний рівень помилок укритичних
процесах		90-95% тестів прийнятності мають бути успішними для
релізу 1.0
Staff	Максимальна ефективність за умовами наявних
ресурсів	Команда обмежена 1 розробником і тестувальником за
сумісництвом	
Cost	Оптимізація бюджету без зниження функціональності	Максимальний бюджет перевищуватися не повинен	


 
4.3.	Робоче середовище

Програмні технології, які будуть використані у серверній частині програмної системи, включають Node.js як основну мову розробки та фреймворк Express для побудови REST API. Для автентифікації та авторизації користувачів буде використано middleware, сумісне з JSON Web Tokens (JWT), а для доступу до бази даних MongoDB — драйвер Mongoose, що використовується для зберігання інформації про користувачів, дані температури та руху, параметри роботи IoT пристроїв моніторингу. Додатково інтегровано API Anthropic Claude для ШІ-аналізу даних та генерації персоналізованих рекомендацій.
Програмні технології, які будуть використані у програмному забезпеченні пристроїв інтернету речей, передбачають використання протоколу MQTT для обміну повідомленнями між IoT-пристроями моніторингу (зокрема датчиками температури DHT22, датчиками руху PIR) та сервером, а також спеціалізованих бібліотек, сумісних з цим протоколом. Пристрої ESP32 будуть налаштовані на передачу даних температури, вологості та активності руху у реальному часі до центрального серверу для моніторингу показників мікроклімату та безпеки.
Програмні технології, які будуть використані у веб-клієнтській частині програмної системи, базуються на мові програмування JavaScript з використанням фреймворка React для розробки адаптивного та інтерактивного користувацького інтерфейсу для взаємодії з системою через браузер. Інтерфейс включатиме дашборди для відображення аналітики, графіків температурних трендів та ШІ рекомендацій.
Захист даних у програмній системі буде забезпечено за допомогою шифрування інформації, що зберігається у базі даних, із застосуванням стандарту AES-256. Крім того, для безпечного доступу користувачів реалізовано автентифікацію та авторизацію через JWT із підтримкою ролей та прав доступу. MQTT комунікація захищена через TLS шифрування.
Адміністрування програмної системи здійснюватиметься через окрему адміністративну панель (React-based), доступ до якої матимуть лише користувачі з відповідними правами. Через цю панель адміністратор зможе керувати користувачами, моніторити роботу системи, перевіряти логування подій моніторингу температури та руху, керувати системними налаштуваннями та переглядати глобальну аналітику з усіх пристроїв.
Резервне копіювання даних і налаштувань програмної системи виконуватиметься автоматично щодня за допомогою скриптів, що створюють резервні копії бази даних MongoDB та конфігураційних файлів сервера. Також передбачено TTL індекси для автоматичної очистки застарілих даних датчиків.
Налаштування пристрою інтернету речей здійснюватиметься через інтерфейс конфігурації, який дозволить підключити новий IoT пристрій до системи, задати порогові значення для датчиків температури та чутливість датчиків руху, налаштувати зони моніторингу та перевірити з'єднання з сервером через MQTT-брокер. Кожен пристрій отримує унікальний ідентифікатор у форматі YYYYMMDD-userID-6randmSymbols.
Мовами, якими буде локалізована програмна система в наступних випусках, є українська та англійська. Українська мова використовується як основна, тоді як англійська забезпечує доступ для потенційних міжнародних користувачів та персоналу, що не володіє українською.
Інтернаціоналізація програмної системи забезпечується за допомогою зовнішніх ресурсних файлів, які містять текстові повідомлення різними мовами. У веб-клієнті буде реалізовано механізм вибору мови, який надасть можливість користувачеві змінити мову вручну. ШІ рекомендації також локалізуються відповідно до обраної мови користувача.
Посилання на GitHub: 
