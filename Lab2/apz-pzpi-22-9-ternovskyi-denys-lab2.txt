Міністерство освіти і науки України Харківський національний університет радіоелектроніки


Кафедра програмної інженерії





Звіт
з лабораторної роботи №2
з дисципліни "Архітектура програмного забезпечення" з теми: "Мобільний застосунок"







Виконав	Перевірив
ст. гр. ПЗПІ-22-9	Дашенков Д. С.
Терновський Денис














2025
 
1	ІСТОРІЯ ЗМІН

Таблиця 1 – Історія змін

№	Дата	Версія звіту	Опис змін та виправлень
1	25.05.2025	0.1	Створено звіт

2	ЗАВДАННЯ

Тема: Мобільний застосунок
У межах цієї лабораторної роботи необхідно створити мобільний додаток для Android платформи, призначений для управління задачами з інтеграцією IoT пристроїв (умні лампи). Додаток має бути частиною розумної системи управління задачами та взаємодіяти з Node.js сервером для синхронізації з підключеними умними пристроями. Для розробки використовується Kotlin для Android з архітектурою MVVM та інтеграцією REST API для взаємодії з backend сервером, що обробляє дані від умних ламп через MQTT протокол.
Додаток А: UI мобільного додатоку

3	ОПИС ВИКОНАНОЇ РОБОТИ

3.1	Опис прийнятих інженерних рішень


Під час розробки мобільного застосунку Smart Lamp Task Manager було прийнято низку ключових технічних та архітектурних рішень, що забезпечили стабільність, модульність та потенціал для масштабування системи.
1.	Вибір мови Kotlin: Застосунок розроблено мовою Kotlin, що є офіційною та рекомендованою мовою для Android-розробки. Kotlin забезпечує лаконічний, безпечний та виразний синтаксис, а також повну сумісність з Java, що сприяє написанню чистого коду та зменшенню кількості типових помилок.
2.	Архітектура MVVM з Fragments: Користувацький інтерфейс реалізовано з використанням архітектури MVVM з Fragment-компонентами та Material Design 3. Це дозволяє структурувати інтерфейс на модульні, незалежні компоненти, такі як DashboardFragment, TasksFragment, DevicesFragment, ProfileFragment та інші. Такий підхід підвищує гнучкість навігації через Bottom Navigation, спрощує керування станом UI та забезпечує легкість підтримки та повторного використання елементів інтерфейсу.
3.	Взаємодія з бекендом через Retrofit: Для комунікації з серверною частиною використано сучасну бібліотеку Retrofit з OkHttp. Вона дозволяє ефективно виконувати HTTP-запити та спрощує визначення API-інтерфейсів (як демонструє ApiService з endpoints для аутентифікації, задач, пристроїв та аналітики). Retrofit автоматично обробляє дані у форматі JSON та підтримує асинхронні операції, що є критично важливим для мережевої взаємодії. Наявність ApiClient вказує на централізовану конфігурацію мережевого клієнта.
4.	Багатошарова архітектура та розділення відповідальностей: Структура проєкту організована згідно з принципами багатошаровості, розділяючи різні аспекти функціональності на окремі пакети: 
o	Шар даних (models, network): Містить логіку, пов'язану з отриманням та обробкою даних від умних ламп. Включає API-інтерфейси, моделі даних (User, Task, Device) та мережеві сервіси, які абстрагують джерела даних.
o	Шар UI (activities, fragments, adapters): Відповідає за відображення даних та взаємодію з користувачем, включаючи основні екрани для керування задачами, пристроями та профілем користувача.
o	Шар утиліт (utils): Містить AuthManager та допоміжні класи, які забезпечують стійкість даних при зміні конфігурації та керування автентифікацією. Таке розділення робить код більш організованим, легшим для тестування та підтримки.
5.	RESTful API для ключових функцій: Взаємодія з Node.js бекендом здійснюється через REST API, що підтримує ключові функції застосунку. На основі структури API, реалізовано запити для: 
o	Авторизації та реєстрації користувачів (AuthManager).
o	Керування задачами та отримання інформації про їх статус.
o	Отримання даних про умні лампи та їх синхронізація з задачами.
o	Обробки аналітичних даних Dashboard та статистики продуктивності. Це забезпечує надійну взаємодію з сервером для управління задачами та керування умними лампами через MQTT протокол.
6.	Безпека: Авторизація користувачів реалізована з використанням JWT-токенів для забезпечення безпечного доступу до ресурсів. Проводиться валідація вхідних даних користувача на клієнтській стороні, що допомагає запобігти некоректним запитам.
7.	Масштабованість: Архітектура проєкту, з її чітким розподілом на шари (models, activities, fragments, network), використанням централізованого API сервісу та модульною структурою UI з Fragment-компонентами, спроєктована з урахуванням можливості легкого додавання нових функцій, типів умних пристроїв або розширення функціоналу управління задачами в майбутньому.
Застосовані технічні та архітектурні рішення створили міцну основу для Smart Lamp Task Manager, забезпечивши чистоту коду, високу продуктивність та зручність для подальшого розвитку проєкту управління задачами з IoT інтеграцією умних ламп.


3.2	Опис взаємодії компонентів мобільного застосунку одне з одним та з іншими елементами системи.

Мобільний застосунок Smart Lamp Task Manager побудований на модульній архітектурі, де кожен екран виконує окрему логічну функцію. Взаємодія між внутрішніми компонентами та із зовнішніми сервісами реалізована через чітко визначені механізми, що забезпечують стабільність та масштабованість.
Взаємодія між компонентами застосунку:
•	MainActivity: Виступає як головна "оболонка" або контейнер з Bottom Navigation, у якому відображаються різні фрагменти, що складають інтерфейс застосунку.
•	Fragment-компоненти: Основні екрани застосунку реалізовані з використанням архітектури MVVM з Fragments (DashboardFragment, TasksFragment, DevicesFragment, ProfileFragment тощо, як видно у пакеті fragments). Фрагменти не взаємодіють напряму один з одним, а навігація між ними здійснюється за допомогою Bottom Navigation з чотирма основними розділами.
•	Передача даних між екранами: Для передачі необхідних даних (наприклад, ідентифікаторів задач або умних ламп) між екранами використовуються Bundle аргументи та Intent параметри при переходах між Activities та Fragments.
•	Adapters та ViewBinding: Кожен список (задач, пристроїв) має відповідний адаптер (TaskAdapter, DeviceAdapter), які керують відображенням даних та обробляють взаємодію з користувачем, забезпечуючи плавну роботу з RecyclerView компонентами.
Взаємодія з backend-сервером:
•	Мережева бібліотека: Для комунікації з Node.js серверною частиною використовується сучасна бібліотека Retrofit у поєднанні з OkHttp, що забезпечує ефективне та асинхронне виконання мережевих запитів.
•	API-інтерфейси: Усі запити до серверного API описані у ApiService інтерфейсі, згрупованому у пакеті network. Конфігурація мережевого клієнта централізована у ApiClient з підтримкою різних середовищ (емулятор, локальна мережа, продакшн).
•	Моделі даних: Дані, що надходять із сервера у форматі JSON, автоматично мапляються у відповідні Kotlin класи-моделі (наприклад, Task, Device, User, Dashboard, ApiResponse) з пакету models. Ці моделі потім використовуються для відображення даних в UI або для внутрішньої логіки.
•	Асинхронність: Усі мережеві операції є асинхронними, що запобігає блокуванню головного потоку UI та забезпечує плавну роботу застосунку під час обміну даними про задачі та умні лампи.
•	Централізоване управління: AuthManager абстрагує управління автентифікацією, надаючи єдиний інтерфейс для роботи з JWT токенами, який може працювати як з мережею, так і з локальним збереженням даних користувача.
Взаємодія з умними лампами (через сервер):
•	Мобільний застосунок взаємодіє з умними лампами опосередковано – через Node.js backend-сервер.
•	Застосунок може надсилати команди або запити на сервер для керування пристроями (наприклад, створення нових задач, призначення задач на конкретні лампи, налаштування параметрів освітлення через відповідні UI-екрани та API-запити).
•	Застосунок отримує дані від сервера про стан умних ламп, прогрес виконання задач, статистику продуктивності та аналітичні дані Dashboard (через endpoints /api/tasks, /api/devices, /api/analytics/dashboard), важливі події чи оповіщення.
•	Таким чином, сервер виступає посередником, обробляючи комунікацію з самими умними лампами через MQTT протокол та надаючи мобільному застосунку необхідні дані та функціональність для управління задачами та базового керування системами розумного освітлення.
Загалом, мобільний застосунок Smart Lamp Task Manager реалізує чисту та структуровану взаємодію між внутрішніми компонентами (фрагментами, адаптерами, моделями, мережевими сервісами) та Node.js бекенд-сервером, що забезпечує ефективне управління задачами та керування підключеними умними лампами, а також робить архітектуру зрозумілою та масштабованою.

 
3.3	UML діаграма прецедентів (Use Case Diagram)

 
Рисунок 3.1 – UML діаграма прецедентів


3.4	ER-модель даних (Entity–Relationship Model) мобільної платформи.

 
Рисунок 3.2 –ER-діаграма даних

3.5	UML діаграма діяльності (Activity Diagram);


 

Рисунок 3.4 – UML діаграма діяльності


4	ВИСНОВКИ

У ході виконання лабораторної роботи було розроблено повноцінний мобільний застосунок Smart Lamp Task Manager мовою Kotlin для платформи Android. Застосунок реалізує функціонал авторизації користувачів, відображення профілю, перегляду списку підключених умних ламп, управління задачами з можливістю їх призначення на конкретні пристрої та роботи з аналітичними даними продуктивності. Було прийнято низку інженерних рішень, зокрема використано архітектуру MVVM з Fragments та Material Design 3, бібліотеку Retrofit у поєднанні з OkHttp для ефективної асинхронної взаємодії з бекенд-сервером. Бекенд-частина побудована на Node.js та забезпечує обмін даними з умними лампами через MQTT протокол. Мобільна частина реалізує взаємодію з IoT пристроями (умними лампами) опосередковано через сервер, забезпечуючи синхронізацію задач з освітленням та моніторинг стану пристроїв. Структура проєкту є масштабованою, логічно поділеною на компоненти (згідно з принципами багатошарової архітектури: activities, fragments, adapters, models, network, utils) та відповідає вимогам сучасної клієнт-серверної системи управління задачами з можливістю інтеграції IoT пристроїв, відстеження продуктивності та аналітики даних через Dashboard.
Посилання на GitHub: 
Посилання на YouTube: 

 
ДОДАТОК А
loginPage
 
 
RegisterPage
 
 
HomePage
 
 
ProfilePage Part 1
 
 
ProfilePage Part 2
 
 
DevicePage
 
 
TaskPage
 

